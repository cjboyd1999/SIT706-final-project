AWSTemplateFormatVersion: 2010-09-09
Description: Network layer for SIT706 Task 6.1P (Final Project)

Parameters:

  MyIP:
    Type: String
    Description: Your public IP address (in CIDR format, e.g., 111.111.111.111/32)

Resources:
  
  # ---
  # [ KEY PAIR USED BY ALL INSTANCES ]
  # ---

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: 
        Fn::Sub: '${AWS::StackName}-instance-key-pair'

  # ---
  # [ CORE NETWORK DEFINITIONS ]
  # ---

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-vpc-west'
  
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-igw'

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  NGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-ngw'
  
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-lb'

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: app-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-web-server-tg'

  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref AppTargetGroup
          Type: forward
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  # ---
  # [ SUBNET DEFINITIONS ]
  # ---

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 192.168.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-public-subnet-2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 192.168.2.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 192.168.3.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-private-subnet-2'

  # ---
  # [ PUBLIC ROUTE TABLE ]
  # ---
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-public-route-table'

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Route traffic to the IGW if Internet-bound
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  # ---
  # [ PRIVATE ROUTE TABLE ]
  # ---

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-private-route-table'

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Route traffic to the NGW if it is Internet-bound
  NatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NGW
      RouteTableId: !Ref PrivateRouteTable

  # ---
  # [ Security Group Definitions ]
  # ---      

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access from the Internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-LB-SG'

  AMISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access from the Internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIP
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-AMI-SG'

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access from the ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSecurityGroup
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-WEBAPP-SG'

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from the AMI and App SGs
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AMISecurityGroup
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: '${AWS::StackName}-DB-SG'

Outputs:
  
  # ---
  # [ CORE INFRASTRUCTURE OUTPUTS ]
  # ---
  
  VpcId:
    Description: The VPC ID
    Value:
      Ref: VPC
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-VpcID'

  AppTargetGroup:
    Description: ID of the Application Target Group
    Value:
      Ref: AppTargetGroup
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-app-target-group'

  # ---
  # [ SUBNET OUTPUTS ]
  # ---

  PublicSubnet1:
    Description: ID of public-subnet-1
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-public-subnet-1'

  PublicSubnet2:
    Description: ID of public-subnet-2
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-public-subnet-2'

  PrivateSubnet1:
    Description: ID of private-subnet-1
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-private-subnet-1'

  PrivateSubnet2:
    Description: ID of private-subnet-2
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-private-subnet-2'

  # ---
  # [ SG OUTPUTS ]
  # ---

  LBSecurityGroup:
    Description: ID of the Load Balancer SG
    Value:
      Ref: LBSecurityGroup
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-LB-SG'
  
  AMISecurityGroup:
    Description: ID of the AMI SG
    Value:
      Ref: AMISecurityGroup
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-AMI-SG'

  AppSecurityGroup:
    Description: ID of the Application SG
    Value:
      Ref: AppSecurityGroup
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-WEBAPP-SG'

  DBSecurityGroup:
    Description: ID of the Database SG
    Value:
      Ref: DBSecurityGroup
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DB-SG'